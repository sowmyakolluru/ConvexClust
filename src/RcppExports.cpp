// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ADMM_c
Rcpp::List ADMM_c(arma::mat& X, arma::mat& H, arma::mat& U, arma::mat& V, arma::mat& index, arma::mat& Matrix_index1, arma::mat& Matrix_index2, arma::vec& sizes1, arma::vec& sizes2, int M1, int M2, arma::vec& w, int p, int n, int nk, double gamma, double tau, int num_iter);
RcppExport SEXP _ConvexClust_ADMM_c(SEXP XSEXP, SEXP HSEXP, SEXP USEXP, SEXP VSEXP, SEXP indexSEXP, SEXP Matrix_index1SEXP, SEXP Matrix_index2SEXP, SEXP sizes1SEXP, SEXP sizes2SEXP, SEXP M1SEXP, SEXP M2SEXP, SEXP wSEXP, SEXP pSEXP, SEXP nSEXP, SEXP nkSEXP, SEXP gammaSEXP, SEXP tauSEXP, SEXP num_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Matrix_index1(Matrix_index1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Matrix_index2(Matrix_index2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sizes1(sizes1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sizes2(sizes2SEXP);
    Rcpp::traits::input_parameter< int >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< int >::type M2(M2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type num_iter(num_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(ADMM_c(X, H, U, V, index, Matrix_index1, Matrix_index2, sizes1, sizes2, M1, M2, w, p, n, nk, gamma, tau, num_iter));
    return rcpp_result_gen;
END_RCPP
}
// ComputeWeights_c
arma::mat ComputeWeights_c(const arma::mat& X, double mu);
RcppExport SEXP _ConvexClust_ComputeWeights_c(SEXP XSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeWeights_c(X, mu));
    return rcpp_result_gen;
END_RCPP
}
// edges_c
Rcpp::List edges_c(const arma::mat& w, int n);
RcppExport SEXP _ConvexClust_edges_c(SEXP wSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(edges_c(w, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ConvexClust_ADMM_c", (DL_FUNC) &_ConvexClust_ADMM_c, 18},
    {"_ConvexClust_ComputeWeights_c", (DL_FUNC) &_ConvexClust_ComputeWeights_c, 2},
    {"_ConvexClust_edges_c", (DL_FUNC) &_ConvexClust_edges_c, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ConvexClust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
